@import "api.cocoascript"

var initToken = function(context){
    doc = context.document;
    var key = [doc askForUserInput:"What is your API key?" initialValue:""]
    var token = [doc askForUserInput:"What is your API token?" initialValue:""]
    if (verifyAuth(key, token, false) == true) {
        var fileManager = NSFileManager.defaultManager()
        fileManager.createFileAtPath_contents_attributes(tokenPath, token, nil)
        fileManager.createFileAtPath_contents_attributes(keyPath, key, nil)
    } else {
        [doc showMessage:"👻 Your Trello API token is invalid!"]
    }
}

var saveInfos = function(){
    var fileManager = NSFileManager.defaultManager()
    fileManager.createFileAtPath_contents_attributes(optionsPath, JSON.stringify(options), nil)
}

var verifyAuth = function (key, token, silent) {
    var response = getJSON(rootURL + "members/me?key=" + key+'&token='+token);
    if (response.username) {
      if(silent == false){
        [doc showMessage: "👋 Logged in as " + response.username];
      }
      return true;
    }else{
        return false
    }
}

var exportFunction = function(context){
    doc = context.document;
    selection  = context.selection;
    plugin  = context.plugin;
    var infos = getActiveToken();
    if (verifyAuth(infos.key, infos.token, true) == true) {
      chooseBoard();
    }else{
      [doc showMessage: "👽 Your token has probably expired… Please check it"];
    }
}

var chooseBoard = function(){
    getBoards();
    getOptions();
    var choice = createSelect('Choose a board...', activeBoardNames, options.board, 'board.png')
    if (choice != -1) {
        chooseList(choice);
    }
}

var chooseList = function(choice){
    var boardId = [activeBoardIds objectAtIndex:choice];
    options.board = choice;
    getLists(boardId);
    var choice = createSelect('Choose a List...', activeListNames, options.list, 'list.png')
    if (choice != -1) {
        chooseCard(choice);
    }
}

var chooseCard = function(choice){
    options.list = choice;
    var card = createSelectBoard('Choose a Card...', choice)
    if (card != -1) {
        exportArtboardsAndSendTo(card)
    }
}

function getOptions(){
    var fileExists = NSFileManager.defaultManager().fileExistsAtPath(optionsPath);
    if (fileExists) {
        var data = NSString.stringWithContentsOfFile_encoding_error(optionsPath,NSUTF8StringEncoding,nil)
        options = JSON.parse(data)
    }
    return options;
}

function getActiveToken() {
    var fileExists = NSFileManager.defaultManager().fileExistsAtPath(tokenPath);
    if (fileExists) {
        var token = NSString.stringWithContentsOfFile_encoding_error(tokenPath,NSUTF8StringEncoding,nil)
        var key = NSString.stringWithContentsOfFile_encoding_error(keyPath,NSUTF8StringEncoding,nil)
        return {token:token, key:key};
    } else {
        return false;
    }
}

var createSelect = function (msg, items, selectedItemIndex, icon){
  selectedItemIndex = selectedItemIndex || 0
  icon = icon || nil

  var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,200,25)]
  [accessory setCompletes:true]
  [accessory addItemsWithObjectValues:items]
  [accessory selectItemAtIndex:selectedItemIndex]

  var alert = [[NSAlert alloc] init]

  if(icon !== nil){
      var iconUrl = [plugin urlForResourceNamed:icon]
      var icon = [[NSImage alloc] initWithContentsOfURL:iconUrl];
  }


  [alert setIcon:icon]
  [alert setMessageText:msg]
  [alert addButtonWithTitle:'OK']
  [alert addButtonWithTitle:'Cancel']
  [alert setAccessoryView:accessory]

  var responseCode = [alert runModal]
  if (responseCode == 1000) {
      var sel = [accessory indexOfSelectedItem]
      return sel
  } else {
      return -1
  }
}

var createSelectBoard = function (msg, choice){
    var listId = [activeListIds objectAtIndex:choice];
    getCards(listId);

    if([activeCardNames count] === 0){
        [doc showMessage:"🤕 You should create cards on trello"]
        var e = [NSException
        exceptionWithName:@"No cards in this list"
        reason:@"You should create cards on trello"
        userInfo:nil];
        throw e;
    }

    var accessory = [[NSView alloc] initWithFrame:NSMakeRect(0,0,200,200)]

    var cards = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,175,200,25)]
    [cards setCompletes:true]
    [cards addItemsWithObjectValues:activeCardNames]
    [cards selectItemAtIndex:0]

    var listLabel = [[NSTextView alloc] initWithFrame:NSMakeRect(0,140,200,25)]
    [listLabel setString:"Move to another list ?"]
    [listLabel setDrawsBackground:0];
    [listLabel setEditable:0];
    [listLabel setSelectable:0];

    var lists = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,115,200,25)]
    [lists setCompletes:true]
    [lists addItemsWithObjectValues:activeListNames]
    [lists selectItemAtIndex:0]
    [lists selectItemAtIndex:options.list]

    var labelComment = [[NSTextView alloc] initWithFrame:NSMakeRect(0,80,200,25)]
    [labelComment setString:"Add a comment"]
    [labelComment setDrawsBackground:0];
    [labelComment setEditable:0];
    [labelComment setSelectable:0];

    var comment = [[NSTextField alloc] initWithFrame:NSMakeRect(0,55,200,25)]

    var shouldCover = [[NSButton alloc] initWithFrame:NSMakeRect(0,30,200,25)]
    [shouldCover setButtonType:NSSwitchButton]
    [shouldCover setTitle:"Set the image as cover ?"]

    [accessory addSubview:cards]
    [accessory addSubview:listLabel]
    [accessory addSubview:lists]
    [accessory addSubview:labelComment]
    [accessory addSubview:comment]
    [accessory addSubview:shouldCover]


    var alert = [[NSAlert alloc] init]

    var iconUrl = [plugin urlForResourceNamed:"card.png"]
    var icon = [[NSImage alloc] initWithContentsOfURL:iconUrl];


    [alert setIcon:icon]
    [alert setMessageText:msg]
    [alert addButtonWithTitle:'OK']
    [alert addButtonWithTitle:'Cancel']
    [alert setAccessoryView:accessory]

    var responseCode = [alert runModal]
    if (responseCode == 1000) {
      return {is_cover:[shouldCover state], comment: [comment stringValue], card :[cards indexOfSelectedItem], list: [lists indexOfSelectedItem] }
  } else {
      return -1
  }
}


var exportArtboardsAndSendTo = function(choice) {
    var done = 0;
    var loop = [selection objectEnumerator]

    //save selected infos
    saveInfos();
    //export selected ArtBoards
    while (item = [loop nextObject]) {
        if (item.className() == "MSArtboardGroup") {
            var path = NSTemporaryDirectory() + item.name() + ".png"
            [doc saveArtboardOrSlice:item toFile: path];
            if(postFile(path, choice)){
                moveCard(choice)
                addComment(choice)
                done ++;
            }
        }
    }
    //feedback on what happened
    if(done > 0){
        doc.showMessage("The operation is complete 👏")
    }else{
        doc.showMessage("😱 Nothing happened...Did you select any artboards ?")
    }
}
